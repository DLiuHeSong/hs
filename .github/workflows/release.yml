name: Auto Tag
on:
  push:
    branches:
      - master  # 监听 master 分支推送事件

jobs:
  tag:
    runs-on: ubuntu-latest

    steps:
      # Step 1: 检出代码
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: 获取最新标签
      - name: Get latest tag
        id: get_tag
        run: |
          # 获取最新的 Git 标签
          latest_tag=$(git describe --tags --abbrev=0 || echo "v0.0.0")
          echo "Latest tag: $latest_tag"
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV

      # Step 3: 自动计算新版本号
      - name: Calculate new version
        id: calc_version
        run: |
          # 提取版本号
          latest_tag=${{ env.latest_tag }}
          major=$(echo $latest_tag | cut -d. -f1 | tr -d 'v')
          minor=$(echo $latest_tag | cut -d. -f2)
          patch=$(echo $latest_tag | cut -d. -f3)

          # 假设每次触发更新 PATCH
          patch=$((patch + 1))

          # 拼接新版本
          new_tag="v$major.$minor.$patch"
          echo "New tag: $new_tag"
          echo "new_tag=$new_tag" >> $GITHUB_ENV

      # Step 4: 创建并推送新标签
      - name: Create and push new tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          new_tag=${{ env.new_tag }}
          # 配置用户信息
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # 创建新标签并推送
          git tag $new_tag
          git push origin $new_tag

            # Step 5: 创建 GitHub Release
      - name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.new_tag }}
          release_name: "Release ${{ env.new_tag }}"
          body: "This is an auto-generated release for version ${{ env.new_tag }}."
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

